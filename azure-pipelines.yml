pool:
  name: 'qa-framework-dev'
  demands:
    - AgentName -equals shaun

jobs:
  - job: ExecuteSingleJob
    displayName: 'Run PowerShell Scripts in Parallel Within a Single Agent'
    steps:
      - task: PowerShell@2
        displayName: "Run Parallel Scripts"
        inputs:
          targetType: 'inline'
          script: |
            $job1 = Start-Job -ScriptBlock {
              # Task 1: Script for Job 1
              $uri = "http://localhost:5223/api/test/run"
              $wsUri = "ws://localhost:5223/ws/logs"
              $filePath = "C:\Users\BautisSh\Downloads\EarlyON_Regression.xlsx"

              $client = [System.Net.WebSockets.ClientWebSocket]::new()
              $connectTask = $client.ConnectAsync([System.Uri]::new($wsUri), [Threading.CancellationToken]::None)
              $connectTask.Wait()
              # Your existing connection and messaging logic for Task 1
            }

            $job2 = Start-Job -ScriptBlock {
              # Task 2: Script for Job 2
              $uri = "http://localhost:5224/api/test/run"
              $wsUri = "ws://localhost:5224/ws/logs"
              $filePath = "C:\Users\BautisSh\Downloads\EarlyON_Regression.xlsx"

              $client = [System.Net.WebSockets.ClientWebSocket]::new()
              $connectTask = $client.ConnectAsync([System.Uri]::new($wsUri), [Threading.CancellationToken]::None)
              $connectTask.Wait()
              # Your existing connection and messaging logic for Task 2
            }

            $job3 = Start-Job -ScriptBlock {
              # Task 3: Script for Job 3
              $uri = "http://localhost:5225/api/test/run"
              $wsUri = "ws://localhost:5225/ws/logs"
              $filePath = "C:\Users\BautisSh\Downloads\EarlyON_Regression.xlsx"

              $client = [System.Net.WebSockets.ClientWebSocket]::new()
              $connectTask = $client.ConnectAsync([System.Uri]::new($wsUri), [Threading.CancellationToken]::None)
              $connectTask.Wait()
              # Your existing connection and messaging logic for Task 3
            }

            # Wait for all jobs to complete
            $job1 | Wait-Job
            $job2 | Wait-Job
            $job3 | Wait-Job
