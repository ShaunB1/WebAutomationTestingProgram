pool:
  name: 'qa-framework-dev'
  demands:
    - AgentName -equals shaun

jobs:
  - job: ExecuteJob1
    displayName: 'Run PowerShell Script on Agent "shaun"'
    steps:
      - task: PowerShell@2
        displayName: "Execute Job 1"
        inputs:
          targetType: 'inline'
          script: |
            $client = [System.Net.WebSockets.ClientWebSocket]::new()
            $uri = [System.Uri]::new("http://localhost:5223/api/test/run")
            $wsUri = [System.Uri]::new("ws://localhost:5223/ws/logs")

            try {
              $connectTask = $client.ConnectAsync($wsUri, [Threading.CancellationToken]::None)
              $connectTask.Wait()
              $buffer = New-Object byte[] 4096
              
              if ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                Write-Host "Connected to WebSocket server."
              }
              
              Start-Job -ScriptBlock {
                param($uri)
                $response = curl.exe -s -X POST -F 'file=@C:\Users\BautisSh\Downloads\EarlyON_Regression.xlsx' $uri
              } -ArgumentList $uri
              
              Write-Host "Passed response"
              
              while ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                $result = $client.ReceiveAsync([ArraySegment[byte]]$buffer, [Threading.CancellationToken]::None).Result
                
                if ($result.Count -gt 0) {
                  $message = [System.Text.Encoding]::UTF8.GetString($buffer, 0, $result.Count)
                  Write-Output $message
                }
                
                    if ($result.MessageType -eq [System.Net.WebSockets.WebSocketMessageType]::Close) {
                        Write-Host "WebSocket connection closing..."
                        break
                    }
              }
              
              Write-Host "WebSocket closed"
            } catch {
              
            } finally {
                if ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                    $client.CloseAsync([System.Net.WebSockets.WebSocketCloseStatus]::NormalClosure, "Closing", [Threading.CancellationToken]::None).Wait()
                }
                $client.Dispose()
                Write-Host "WebSocket connection closed."
            }
  - job: ExecuteJob2
    displayName: "Execute Job 2"
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $client = [System.Net.WebSockets.ClientWebSocket]::new()
            $uri = [System.Uri]::new("http://localhost:5223/api/test/run")
            $wsUri = [System.Uri]::new("ws://localhost:5223/ws/logs")

            try {
              $connectTask = $client.ConnectAsync($wsUri, [Threading.CancellationToken]::None)
              $connectTask.Wait()
              $buffer = New-Object byte[] 4096
              
              if ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                Write-Host "Connected to WebSocket server."
              }
              
              Start-Job -ScriptBlock {
                param($uri)
                $response = curl.exe -s -X POST -F 'file=@C:\Users\BautisSh\Downloads\EarlyON_Regression.xlsx' $uri
              } -ArgumentList $uri
              
              Write-Host "Passed response"
              
              while ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                $result = $client.ReceiveAsync([ArraySegment[byte]]$buffer, [Threading.CancellationToken]::None).Result
                
                if ($result.Count -gt 0) {
                  $message = [System.Text.Encoding]::UTF8.GetString($buffer, 0, $result.Count)
                  Write-Output $message
                }
                
                    if ($result.MessageType -eq [System.Net.WebSockets.WebSocketMessageType]::Close) {
                        Write-Host "WebSocket connection closing..."
                        break
                    }
              }
              
              Write-Host "WebSocket closed"
            } catch {
              
            } finally {
                if ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                    $client.CloseAsync([System.Net.WebSockets.WebSocketCloseStatus]::NormalClosure, "Closing", [Threading.CancellationToken]::None).Wait()
                }
                $client.Dispose()
                Write-Host "WebSocket connection closed."
            }
  - job: ExecuteJob3
    displayName: "Execute Job 3"
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $client = [System.Net.WebSockets.ClientWebSocket]::new()
            $uri = [System.Uri]::new("http://localhost:5223/api/test/run")
            $wsUri = [System.Uri]::new("ws://localhost:5223/ws/logs")

            try {
              $connectTask = $client.ConnectAsync($wsUri, [Threading.CancellationToken]::None)
              $connectTask.Wait()
              $buffer = New-Object byte[] 4096
              
              if ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                Write-Host "Connected to WebSocket server."
              }
              
              Start-Job -ScriptBlock {
                param($uri)
                $response = curl.exe -s -X POST -F 'file=@C:\Users\BautisSh\Downloads\EarlyON_Regression.xlsx' $uri
              } -ArgumentList $uri
              
              Write-Host "Passed response"
              
              while ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                $result = $client.ReceiveAsync([ArraySegment[byte]]$buffer, [Threading.CancellationToken]::None).Result
                
                if ($result.Count -gt 0) {
                  $message = [System.Text.Encoding]::UTF8.GetString($buffer, 0, $result.Count)
                  Write-Output $message
                }
                
                    if ($result.MessageType -eq [System.Net.WebSockets.WebSocketMessageType]::Close) {
                        Write-Host "WebSocket connection closing..."
                        break
                    }
              }
              
              Write-Host "WebSocket closed"
            } catch {
              
            } finally {
                if ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                    $client.CloseAsync([System.Net.WebSockets.WebSocketCloseStatus]::NormalClosure, "Closing", [Threading.CancellationToken]::None).Wait()
                }
                $client.Dispose()
                Write-Host "WebSocket connection closed."
            }
  - job: ExecuteJob4
    displayName: "Execute Job 4"
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $client = [System.Net.WebSockets.ClientWebSocket]::new()
            $uri = [System.Uri]::new("http://localhost:5223/api/test/run")
            $wsUri = [System.Uri]::new("ws://localhost:5223/ws/logs")

            try {
              $connectTask = $client.ConnectAsync($wsUri, [Threading.CancellationToken]::None)
              $connectTask.Wait()
              $buffer = New-Object byte[] 4096
              
              if ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                Write-Host "Connected to WebSocket server."
              }
              
              Start-Job -ScriptBlock {
                param($uri)
                $response = curl.exe -s -X POST -F 'file=@C:\Users\BautisSh\Downloads\EarlyON_Regression.xlsx' $uri
              } -ArgumentList $uri
              
              Write-Host "Passed response"
              
              while ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                $result = $client.ReceiveAsync([ArraySegment[byte]]$buffer, [Threading.CancellationToken]::None).Result
                
                if ($result.Count -gt 0) {
                  $message = [System.Text.Encoding]::UTF8.GetString($buffer, 0, $result.Count)
                  Write-Output $message
                }
                
                    if ($result.MessageType -eq [System.Net.WebSockets.WebSocketMessageType]::Close) {
                        Write-Host "WebSocket connection closing..."
                        break
                    }
              }
              
              Write-Host "WebSocket closed"
            } catch {
              
            } finally {
                if ($client.State -eq [System.Net.WebSockets.WebSocketState]::Open) {
                    $client.CloseAsync([System.Net.WebSockets.WebSocketCloseStatus]::NormalClosure, "Closing", [Threading.CancellationToken]::None).Wait()
                }
                $client.Dispose()
                Write-Host "WebSocket connection closed."
            }




